import time
import os
import json
import tempfile
import base64
import requests
import re
import traceback
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import Select
from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import StaleElementReferenceException, ElementClickInterceptedException
from dotenv import load_dotenv
from openai import OpenAI
from PIL import Image, ImageEnhance


load_dotenv()

class AvicenaLogin:
    def __init__(self, download_dir=None):
        """Inicializa el navegador para login en Avicena y cliente OpenAI"""
        chrome_options = Options()
        chrome_options.add_argument("--start-maximized")
        chrome_options.add_argument("--disable-notifications")
        chrome_options.set_capability(
            "goog:loggingPrefs", {"performance": "ALL"}
        )
        if download_dir:
            prefs = {
                "download.default_directory": download_dir,
                "download.prompt_for_download": False,
            }
            chrome_options.add_experimental_option("prefs", prefs)

        self.driver = webdriver.Chrome(options=chrome_options)
        self.driver.execute_cdp_cmd("Network.enable", {})
        self.wait = WebDriverWait(self.driver, 10)

        api_key = os.environ.get("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("No se encontr√≥ la API key de OpenAI en las variables de entorno")
        self.openai_client = OpenAI(api_key=api_key)

    def presionar_consultar_historia_clinica(self):
        try:

            form_menu = self.wait.until(
                EC.visibility_of_element_located((By.ID, "formMenu"))
            )
            print('Presionar consulta se esta ejecutando')

            actions = ActionChains(self.driver)
            actions.move_to_element(form_menu).perform()  

            print("‚úÖ Men√∫ desplegado tras hover")

            consultar_historia_btn = self.wait.until(
                EC.element_to_be_clickable((By.ID, "formMenu:ctlItemConsultarHistoria:anchor"))
            )
            consultar_historia_btn.click()  # Hacer clic en el enlace
            print("‚úÖ Historia Cl√≠nica Avicena abierta")

            time.sleep(5)

        except Exception as e:
            print(f"‚ùå Error al abrir Historia Cl√≠nica Avicena: {str(e)}")
    
    def seleccionar_tipo_identificacion(self):
        try:
            select_element = self.wait.until(
                EC.element_to_be_clickable((By.ID, "formPrerrequisitos:ctlTipoIdentificacion"))
            )
        
            select = Select(select_element)
            
            select.select_by_value("433")
            
            print("‚úÖ 'C√©dula de ciudadan√≠a' seleccionada correctamente.")
        
        except Exception as e:
            print(f"‚ùå Error al seleccionar el tipo de identificaci√≥n: {str(e)}")
            traceback.print_exc()

    def ingresar_numero_documento(self, numero_documento="41389309"):
        try:
            campo_documento = self.wait.until(
                EC.element_to_be_clickable((By.ID, "formPrerrequisitos:ctlNumeroDocumento"))
            )
            
            campo_documento.send_keys(numero_documento)
            
            print(f"‚úÖ N√∫mero de documento '{numero_documento}' ingresado correctamente.")
        
        except Exception as e:
            print(f"‚ùå Error al ingresar el n√∫mero de documento: {str(e)}")
            traceback.print_exc()

    def clic_buscar(self):
        """Hace clic en el bot√≥n 'Buscar'."""
        try:
    
            boton_buscar = self.wait.until(
                EC.element_to_be_clickable((By.ID, "formPrerrequisitos:buscar1"))
            )
            
            boton_buscar.click()
            
            print("‚úÖ Bot√≥n 'Buscar' clickeado correctamente.")
        
        except Exception as e:
            print(f"‚ùå Error al hacer clic en el bot√≥n 'Buscar': {str(e)}")
            traceback.print_exc()
       
    def clic_consultar_historia_sophia(self):
        """Hace clic en el bot√≥n de consultar historia cl√≠nica."""
        try:
            boton_consultar = self.wait.until(
                EC.element_to_be_clickable((By.ID, "formPrerrequisitos:ctlFolios:0:sophiaBtn"))
            )
            
            boton_consultar.click()
            
            print("‚úÖ Bot√≥n 'Consultar Historia Cl√≠nica' clickeado correctamente.")
        
        except Exception as e:
            print(f"‚ùå Error al hacer clic en el bot√≥n 'Consultar Historia Cl√≠nica': {str(e)}")
            traceback.print_exc()

    def cambiar_a_nueva_ventana(self):
        try:
            time.sleep(2)

            ventanas = self.driver.window_handles
            print(len(ventanas))
            self.driver.switch_to.window(ventanas[1])
            print("‚úÖ Cambiado al contexto de la nueva ventana.")
        
        except Exception as e:
            print(f"‚ùå Error al cambiar a la nueva ventana: {str(e)}")
            traceback.print_exc()
        
    def presionar_boton_regresar(self):
        """M√©todo mejorado para hacer clic en el bot√≥n 'Regresar' con verificaci√≥n de √©xito"""
        max_intentos = 3
        for intento in range(max_intentos):
            try:
                # Usar un tiempo de espera m√°s largo
                wait_boton = WebDriverWait(self.driver, 15)
                boton_regresar = wait_boton.until(
                    EC.element_to_be_clickable((By.ID, "form:botonVolver"))
                )
                
                # Hacer scroll para asegurar que el bot√≥n es visible
                self.driver.execute_script("arguments[0].scrollIntoView(true);", boton_regresar)
                time.sleep(1)
                
                # Intentar primero con click normal
                boton_regresar.click()
                print(f"‚úÖ Bot√≥n 'Regresar' clickeado correctamente (intento {intento+1}).")
                
                # Esperar a que la tabla de resultados sea visible nuevamente
                try:
                    WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.ID, "form:ctlFolios"))
                    )
                    print("‚úÖ Retorno a la tabla de resultados confirmado.")
                    return True
                except TimeoutException:
                    print("‚ö†Ô∏è No se detect√≥ retorno a la tabla de resultados.")
                    if intento < max_intentos - 1:
                        # Si no funcion√≥ el clic normal, intentar con JavaScript
                        self.driver.execute_script("arguments[0].click();", boton_regresar)
                        time.sleep(5)
            except Exception as e:
                print(f"‚ö†Ô∏è Error en intento {intento+1}/{max_intentos} al hacer clic en 'Regresar': {str(e)}")
                if intento < max_intentos - 1:
                    time.sleep(3)
                else:
                    return False
        
        # Verificaci√≥n final
        try:
            return WebDriverWait(self.driver, 5).until(
                EC.presence_of_element_located((By.ID, "form:ctlFolios"))
            ) is not None
        except:
            return False

    def descargar_historia(self, indice=0):
        try:
            print(f"Esperando a que la tabla est√© completamente cargada para registro #{indice}...")
            tabla = self.wait.until(
                EC.presence_of_element_located((By.ID, "form:ctlFolios"))
            )

            boton_id = f"form:ctlFolios:{indice}:verhcSophia"
            boton = self.wait.until(
                EC.presence_of_element_located((By.ID, boton_id))
            )
            print(f"‚úÖ Bot√≥n con ID {boton_id} encontrado.")

            self.driver.execute_script("arguments[0].scrollIntoView();", boton)
            time.sleep(1) 
            print(f"‚úÖ Bot√≥n con ID {boton_id} ahora visible.")

            boton.click()
            print("‚úÖ Modal del visor PDF cargado correctamente.")
            
        except Exception as e:
            print(f"‚ùå Error al cargar el PDF #{indice}: {str(e)}")
            traceback.print_exc()

    def descargar_pdf_con_url(self, pdf_url, save_path):
        """Descarga un PDF directamente usando la URL proporcionada"""
        try:
            print(f"üì• Descargando PDF desde URL: {pdf_url}")
            
            # Construir sesi√≥n requests con cookies de Selenium
            session = requests.Session()
            for ck in self.driver.get_cookies():
                session.cookies.set(ck["name"], ck["value"])
            
            # Hacer la petici√≥n y guardar el contenido
            resp = session.get(pdf_url, stream=True, timeout=30)
            resp.raise_for_status()
            
            # Guardar el PDF
            with open(save_path, "wb") as f:
                total_size = 0
                for chunk in resp.iter_content(1024 * 50):
                    f.write(chunk)
                    total_size += len(chunk)
            
            print(f"‚úÖ PDF descargado correctamente en: {save_path} (Tama√±o: {total_size/1024:.2f} KB)")
            return save_path
        except Exception as e:
            print(f"‚ùå Error al descargar PDF: {str(e)}")
            traceback.print_exc()
            raise

    def obtener_url_pdf(self, timeout=20):
        """M√©todo mejorado para obtener la URL del PDF con registro de intentos y limpieza de logs"""
        print("üîç Buscando URL del PDF en los logs de red...")
        
        # Limpiar logs anteriores para evitar confusiones
        self.driver.get_log("performance")
        
        deadline = time.time() + timeout
        intentos = 0
        while time.time() < deadline:
            intentos += 1
            if intentos % 5 == 0:
                print(f"‚è≥ B√∫squeda de URL PDF en progreso... ({intentos} intentos)")
            
            logs = self.driver.get_log("performance")
            for entry in logs:
                try:
                    msg = json.loads(entry["message"])["message"]
                    if (
                        msg.get("method") == "Network.responseReceived"
                        and msg.get("params", {}).get("response", {}).get("mimeType") == "application/pdf"
                    ):
                        url = msg["params"]["response"]["url"]
                        print(f"‚úÖ URL de PDF encontrada despu√©s de {intentos} intentos: {url}")
                        return url
                except (KeyError, json.JSONDecodeError):
                    continue
            time.sleep(0.5)
        
        raise TimeoutError(f"No se encontr√≥ ninguna respuesta PDF despu√©s de {timeout}s y {intentos} intentos")

    def descargar_pdf_directo(self, save_path):
        # 1) Extraer la URL desde el log
        pdf_url = self.obtener_url_pdf()

        # 2) Construir sesi√≥n requests con cookies de Selenium
        session = requests.Session()
        for ck in self.driver.get_cookies():
            session.cookies.set(ck["name"], ck["value"])

        # 3) Hacer la petici√≥n y guardar el contenido
        resp = session.get(pdf_url, stream=True)
        resp.raise_for_status()
        with open(save_path, "wb") as f:
            for chunk in resp.iter_content(1024 * 50):
                f.write(chunk)

        print(f"‚úÖ PDF descargado correctamente en: {save_path}")
        return save_path

    def login(self, usuario, password):
        print(f"üîë Iniciando sesi√≥n en Avicena con usuario: {usuario}")
        self.driver.get("https://avicena.colsanitas.com/His/login.seam")

        try:
            usuario_input = self.wait.until(
                EC.presence_of_element_located((By.ID, "ctlFormLogin:idUserNameLogin"))
            )
            password_input = self.driver.find_element(By.ID, "ctlFormLogin:idPwdLogin")

            usuario_input.send_keys(usuario)
            password_input.send_keys(password)

            print("ü§ñ Resolviendo captcha con OpenAI...")
            captcha_value = self._resolver_captcha_con_openai()

            if not captcha_value:
                print("‚ùå No se pudo resolver el captcha autom√°ticamente")

                captcha_value = self._resolver_captcha_manual()

            if not captcha_value:
                print("‚ùå No se ingres√≥ el captcha")
                return False

            print(f"‚úÖ Captcha resuelto: {captcha_value}")

            captcha_input = self.driver.find_element(By.ID, "ctlFormLogin:idCodSegCaptcha")
            captcha_input.send_keys(captcha_value)

            login_btn = self.driver.find_element(By.ID, "ctlFormLogin:botonValidar")
            login_btn.click()

            try:
                self.wait.until_not(
                    EC.presence_of_element_located((By.ID, "ctlFormLogin:botonValidar"))
                )
                print("‚úÖ Inicio de sesi√≥n exitoso")
                return True
            except TimeoutException:
                try:
                    error_msg = self.driver.find_element(By.CLASS_NAME, "mensajeErrorLogin").text
                    print(f"‚ùå Error en el inicio de sesi√≥n: {error_msg}")

                    if "captcha" in error_msg.lower():
                        print("üîÑ Reintentando con un nuevo captcha...")
                        return self.login(usuario, password)
                except:
                    print("‚ùå Error en el inicio de sesi√≥n: Tiempo de espera excedido")
                return False

        except Exception as e:
            print(f"‚ùå Error en el formulario de login: {str(e)}")
            return False

    def _resolver_captcha_con_openai(self):

        try:
            captcha_img = self.driver.find_element(By.XPATH, "//img[contains(@id, 'ctlFormLogin:j_id')]")

            captcha_path = os.path.join(tempfile.gettempdir(), "captcha.png")
            captcha_img.screenshot(captcha_path)

            print(f"üîç Captcha guardado en: {captcha_path}")

            self._mejorar_imagen_captcha(captcha_path)

            with open(captcha_path, "rb") as image_file:
                base64_image = base64.b64encode(image_file.read()).decode('utf-8')

            response = self.openai_client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "system",
                        "content": "Eres un sistema especializado en OCR de captchas. Tu tarea es identificar los caracteres num√©ricos en la imagen de captcha proporcionada. S√≥lo responde con los n√∫meros que veas, sin ning√∫n texto adicional."
                    },
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": "Reconoce el c√≥digo num√©rico en esta imagen de captcha. La imagen solo contiene n√∫meros. Responde SOLO con los n√∫meros, sin ning√∫n texto adicional ni explicaciones."},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/png;base64,{base64_image}"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=10
            )

            captcha_text = response.choices[0].message.content.strip()
            captcha_text = re.sub(r'[^0-9]', '', captcha_text)

            return captcha_text

        except Exception as e:
            print(f"‚ùå Error al resolver el captcha con OpenAI: {str(e)}")
            return None

    def _mejorar_imagen_captcha(self, image_path):
        try:
            img = Image.open(image_path)

            img = img.convert('L')
            enhancer = ImageEnhance.Contrast(img)
            img = enhancer.enhance(2)

            # Guardar la imagen mejorada
            img.save(image_path)

        except Exception as e:
            print(f"‚ö†Ô∏è Error al mejorar imagen: {str(e)}")

    def _resolver_captcha_manual(self):
        
        captcha_img = self.driver.find_element(By.XPATH, "//img[contains(@id, 'ctlFormLogin:j_id')]")

        captcha_path = os.path.join(tempfile.gettempdir(), "captcha.png")
        captcha_img.screenshot(captcha_path)

        print(f"üîç Captcha guardado en: {captcha_path}")
        print("‚ö†Ô∏è Resoluci√≥n autom√°tica fall√≥. Por favor, abre esta imagen y revisa el c√≥digo del captcha")

        captcha_value = input("üìù Ingresa el c√≥digo del captcha que ves en la imagen: ")

        return captcha_value

    
    def seleccionar_sucursal(self, valor_sucursal="29374"):
        print(f"üîÑ Seleccionando sucursal con valor: {valor_sucursal}")
        try:

            select_el = self.wait.until(
                EC.element_to_be_clickable((By.ID, "formIngreso:ctlSucursales"))
            )
            select = Select(select_el)

            print(f"   Encontrado elemento select, intentando seleccionar valor '{valor_sucursal}'...")
            select.select_by_value(valor_sucursal)
            print(f"‚úÖ Valor '{valor_sucursal}' seleccionado en el dropdown.")

        except TimeoutException:
             print(f"‚ùå TimeoutException: No se pudo encontrar o hacer clic en el elemento select 'formIngreso:ctlSucursales' despu√©s de esperar.")
             raise 
        except Exception as e:
            print(f"‚ùå Error inesperado al seleccionar la sucursal: {str(e)}")
            import traceback
            traceback.print_exc()
            raise


    def presionar_ingresar(self, retries=3, delay=0.5):

        print("üîÑ Ejecutando la funci√≥n presionar_ingresar...")

        for attempt in range(retries):
            try:
                
                print(f"   (Intento {attempt + 1}/{retries}) Esperando que el bot√≥n 'Ingresar' sea clickeable...")
                ingresar_btn = WebDriverWait(self.driver, 20).until(
                    EC.element_to_be_clickable((By.ID, "formIngreso:btnIngresar"))
                )
                print(f"‚úÖ (Intento {attempt + 1}/{retries}) El bot√≥n 'Ingresar' est√° clickeable.")

               
                print(f"   (Intento {attempt + 1}/{retries}) Haciendo clic...")
                ingresar_btn.click()

                print("‚úÖ Clic en 'Ingresar' ejecutado exitosamente.")
                
                return True

            except StaleElementReferenceException:
                print(f"‚ö†Ô∏è (Intento {attempt + 1}/{retries}) StaleElementReferenceException encontrada.")
                if attempt < retries - 1:
                    print(f"   Reintentando en {delay} segundos...")
                    time.sleep(delay)
                else:
                    print(f"‚ùå StaleElementReferenceException despu√©s de {retries} intentos. Fallando.")

                    return False 

            except TimeoutException:
                 print(f"‚ùå (Intento {attempt + 1}/{retries}) TimeoutException: El bot√≥n no se volvi√≥ clickeable.")
                 return False 

            except ElementClickInterceptedException:
                 print(f"‚ö†Ô∏è (Intento {attempt + 1}/{retries}) ElementClickInterceptedException: Otro elemento est√° bloqueando el clic.")
                 if attempt < retries - 1:
                      print(f"   Reintentando en {delay} segundos...")
                      time.sleep(delay)
                 else:
                      print(f"‚ùå ElementClickInterceptedException despu√©s de {retries} intentos. Fallando.")
                      return False 

            except Exception as e:
                print(f"‚ùå Error inesperado al hacer clic en el bot√≥n 'Ingresar' (Intento {attempt + 1}): {str(e)}")
                import traceback
                traceback.print_exc()
                return False 

        print(f"‚ùå No se pudo hacer clic en el bot√≥n 'Ingresar' despu√©s de {retries} intentos.")
        return False

    def cerrar(self):
        """Cierra el navegador"""
        try:
            self.driver.quit()
            print("‚úÖ Navegador cerrado correctamente")
        except Exception as e:
            print(f"‚ö†Ô∏è Error al cerrar el navegador: {str(e)}")
            
    def descargar_multiples_historias(self, cantidad=3):
        """Descarga m√∫ltiples historias cl√≠nicas en secuencia"""
        download_dir = os.path.join(os.getcwd(), "descargas")
        os.makedirs(download_dir, exist_ok=True)
        
        pdfs_descargados = []
        
        for i in range(cantidad):
            try:
                # Generar nombre √∫nico para el PDF
                pdf_path = os.path.join(download_dir, f"historia_clinica_{i+1}.pdf")
                
                print(f"\nüîÑ Descargando historia cl√≠nica #{i+1} (√≠ndice {i})...")
                
                # Verificar que estamos en la vista de lista
                tabla = WebDriverWait(self.driver, 15).until(
                    EC.presence_of_element_located((By.ID, "form:ctlFolios"))
                )
                print("‚úÖ Tabla de resultados presente y lista para interacci√≥n.")
                
                # Construir ID del bot√≥n espec√≠fico para este √≠ndice
                boton_id = f"form:ctlFolios:{i}:verhcSophia"
                
                # Esperar a que el bot√≥n espec√≠fico est√© presente
                boton = WebDriverWait(self.driver, 15).until(
                    EC.element_to_be_clickable((By.ID, boton_id))
                )
                print(f"‚úÖ Bot√≥n con ID {boton_id} encontrado.")
                
                # Hacer scroll hasta el bot√≥n para asegurarse que es visible
                self.driver.execute_script("arguments[0].scrollIntoView(true);", boton)
                time.sleep(2)  # Esperar despu√©s del scroll
                
                # Hacer clic en el bot√≥n
                boton.click()
                print(f"‚úÖ Clic en bot√≥n {boton_id} realizado.")
                
                # Esperar a que el visor PDF se cargue completamente
                print("‚è≥ Esperando a que el visor PDF se cargue completamente...")
                WebDriverWait(self.driver, 15).until(
                    EC.presence_of_element_located((By.ID, "form:botonVolver"))
                )
                time.sleep(7)  # Tiempo ampliado para asegurar carga completa del PDF
                
                # IMPORTANTE: Obtener la URL del PDF SOLO UNA VEZ y usarla directamente
                try:
                    pdf_url = self.obtener_url_pdf(timeout=20)
                    print(f"‚úÖ URL de PDF encontrada: {pdf_url}")
                    
                    # Descargar el PDF DIRECTAMENTE usando la URL que ya tenemos
                    self.descargar_pdf_con_url(pdf_url, pdf_path)
                    
                    # Verificar que el archivo existe y no tiene tama√±o cero
                    if os.path.exists(pdf_path) and os.path.getsize(pdf_path) > 0:
                        print(f"‚úÖ PDF #{i+1} descargado correctamente: {pdf_path}")
                        pdfs_descargados.append(pdf_path)
                    else:
                        print(f"‚ö†Ô∏è El archivo PDF #{i+1} no se descarg√≥ correctamente o est√° vac√≠o")
                except Exception as e:
                    print(f"‚ùå Error al descargar PDF #{i+1}: {str(e)}")
                    traceback.print_exc()
                
                # Presionar el bot√≥n "Regresar" para volver a la lista
                print("‚è≥ Presionando bot√≥n Regresar...")
                self.presionar_boton_regresar()
                
                # Esperar tiempo suficiente para que se cierre el modal y se actualice la interfaz
                print("‚è≥ Esperando a que la interfaz se actualice completamente...")
                time.sleep(5)  # Tiempo entre descargas
                
            except Exception as e:
                print(f"‚ùå Error al procesar historia cl√≠nica #{i+1}: {str(e)}")
                traceback.print_exc()
                
        return pdfs_descargados



if __name__ == "__main__":
    print("üöÄ Iniciando proceso de login en Avicena Colsanitas...")

    USUARIO = os.environ.get("AVICENA_USUARIO")
    PASSWORD = os.environ.get("AVICENA_PASSWORD")
    API_KEY  = os.environ.get("OPENAI_API_KEY")

    if not (USUARIO and PASSWORD and API_KEY):
        print("‚ùå Faltan variables de entorno. Aseg√∫rate de tener en .env:")
        print("   AVICENA_USUARIO, AVICENA_PASSWORD, OPENAI_API_KEY")
        exit(1)

    download_dir = os.path.join(os.getcwd(), "descargas")
    os.makedirs(download_dir, exist_ok=True)

    avicena = None
    try:
        avicena = AvicenaLogin(download_dir=download_dir)

        if not avicena.login(USUARIO, PASSWORD):
            print("‚ùå Fall√≥ el inicio de sesi√≥n. Saliendo.")
            exit(1)

        avicena.seleccionar_sucursal("29374")
        avicena.presionar_ingresar()
        avicena.presionar_consultar_historia_clinica()
        avicena.seleccionar_tipo_identificacion()
        avicena.ingresar_numero_documento("41389309")
        avicena.clic_buscar()
        avicena.clic_consultar_historia_sophia()
        avicena.cambiar_a_nueva_ventana()
        
        # Usar el m√©todo modificado para descargar m√∫ltiples historias
        pdfs_descargados = avicena.descargar_multiples_historias(cantidad=3)
        
        print(f"‚úÖ Proceso completado. PDFs descargados:")
        for pdf in pdfs_descargados:
            print(f"  - {pdf}")

    except Exception as e:
        print(f"‚ùå Error inesperado en el flujo principal: {e}")
        traceback.print_exc()

    finally:
        if avicena:
            print("üö™ Cerrando el navegador...")
            avicena.cerrar()
