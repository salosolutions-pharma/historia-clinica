from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
import time
import os
import tempfile
import base64
from dotenv import load_dotenv
from openai import OpenAI
from PIL import Image
import re

# Cargar variables de entorno desde el archivo .env
load_dotenv()

class AvicenaLogin:
    def __init__(self):
        """Inicializa el navegador para login en Avicena y cliente OpenAI"""
        chrome_options = Options()
        chrome_options.add_argument("--start-maximized")
        chrome_options.add_argument("--disable-notifications")
        
        self.driver = webdriver.Chrome(options=chrome_options)
        self.wait = WebDriverWait(self.driver, 10)
        
        # Inicializar cliente de OpenAI
        api_key = os.environ.get("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("No se encontr√≥ la API key de OpenAI en las variables de entorno")
        self.openai_client = OpenAI(api_key=api_key)
        
    def login(self, usuario, password):
        """Inicia sesi√≥n en el sistema Avicena con resoluci√≥n autom√°tica del captcha"""
        print(f"üîë Iniciando sesi√≥n en Avicena con usuario: {usuario}")
        self.driver.get("https://avicena.colsanitas.com/His/login.seam")
        
        try:
            # Esperar a que cargue el formulario de login
            usuario_input = self.wait.until(
                EC.presence_of_element_located((By.ID, "ctlFormLogin:idUserNameLogin"))
            )
            password_input = self.driver.find_element(By.ID, "ctlFormLogin:idPwdLogin")
            
            # Ingresar credenciales
            usuario_input.send_keys(usuario)
            password_input.send_keys(password)
            
            # Resolver el captcha con OpenAI
            print("ü§ñ Resolviendo captcha con OpenAI...")
            captcha_value = self._resolver_captcha_con_openai()
                
            if not captcha_value:
                print("‚ùå No se pudo resolver el captcha autom√°ticamente")
                # Caer al m√©todo manual como respaldo
                captcha_value = self._resolver_captcha_manual()
                
            if not captcha_value:
                print("‚ùå No se ingres√≥ el captcha")
                return False
                
            print(f"‚úÖ Captcha resuelto: {captcha_value}")
                
            # Ingresar el captcha
            captcha_input = self.driver.find_element(By.ID, "ctlFormLogin:idCodSegCaptcha")
            captcha_input.send_keys(captcha_value)
            
            # Hacer clic en el bot√≥n de inicio de sesi√≥n
            login_btn = self.driver.find_element(By.ID, "ctlFormLogin:botonValidar")
            login_btn.click()
            
            # Verificar si el login fue exitoso
            try:
                # Esperamos a que desaparezca el formulario de login
                self.wait.until_not(
                    EC.presence_of_element_located((By.ID, "ctlFormLogin:botonValidar"))
                )
                print("‚úÖ Inicio de sesi√≥n exitoso")
                return True
            except TimeoutException:
                # Verificar si hay alg√∫n mensaje de error
                try:
                    error_msg = self.driver.find_element(By.CLASS_NAME, "mensajeErrorLogin").text
                    print(f"‚ùå Error en el inicio de sesi√≥n: {error_msg}")
                    
                    # Si el error es sobre el captcha, reintentar
                    if "captcha" in error_msg.lower():
                        print("üîÑ Reintentando con un nuevo captcha...")
                        return self.login(usuario, password)
                except:
                    print("‚ùå Error en el inicio de sesi√≥n: Tiempo de espera excedido")
                return False
                
        except Exception as e:
            print(f"‚ùå Error en el formulario de login: {str(e)}")
            return False
    
    def _resolver_captcha_con_openai(self):
        """Utiliza OpenAI para resolver el captcha"""
        try:
            # Mostrar la imagen del captcha
            captcha_img = self.driver.find_element(By.XPATH, "//img[contains(@id, 'ctlFormLogin:j_id')]")
            
            # Guardar temporalmente la imagen del captcha
            captcha_path = os.path.join(tempfile.gettempdir(), "captcha.png")
            captcha_img.screenshot(captcha_path)
            
            print(f"üîç Captcha guardado en: {captcha_path}")
            
            # Mejorar la imagen para el OCR
            self._mejorar_imagen_captcha(captcha_path)
            
            # Convertir la imagen a base64
            with open(captcha_path, "rb") as image_file:
                base64_image = base64.b64encode(image_file.read()).decode('utf-8')
            
            # Enviar la imagen a OpenAI para reconocimiento
            response = self.openai_client.chat.completions.create(
                model="gpt-4o",  # o cualquier otro modelo con capacidades de visi√≥n
                messages=[
                    {
                        "role": "system",
                        "content": "Eres un sistema especializado en OCR de captchas. Tu tarea es identificar los caracteres num√©ricos en la imagen de captcha proporcionada. S√≥lo responde con los n√∫meros que veas, sin ning√∫n texto adicional."
                    },
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": "Reconoce el c√≥digo num√©rico en esta imagen de captcha. La imagen solo contiene n√∫meros. Responde SOLO con los n√∫meros, sin ning√∫n texto adicional ni explicaciones."},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/png;base64,{base64_image}"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=10
            )
            
            # Extraer el texto reconocido
            captcha_text = response.choices[0].message.content.strip()
            
            # Limpiar el resultado (mantener solo d√≠gitos)
            captcha_text = re.sub(r'[^0-9]', '', captcha_text)
            
            return captcha_text
            
        except Exception as e:
            print(f"‚ùå Error al resolver el captcha con OpenAI: {str(e)}")
            return None
    
    def _mejorar_imagen_captcha(self, image_path):
        """Mejora la imagen del captcha para facilitar el OCR"""
        try:
            # Abrir la imagen
            img = Image.open(image_path)
            
            # Convertir a escala de grises
            img = img.convert('L')
            
            # Aumentar el contraste
            from PIL import ImageEnhance
            enhancer = ImageEnhance.Contrast(img)
            img = enhancer.enhance(2)
            
            # Guardar la imagen mejorada
            img.save(image_path)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error al mejorar imagen: {str(e)}")
    
    def _resolver_captcha_manual(self):
        """Solicita al usuario que ingrese manualmente el captcha (m√©todo de respaldo)"""
        # Mostrar la imagen del captcha
        captcha_img = self.driver.find_element(By.XPATH, "//img[contains(@id, 'ctlFormLogin:j_id')]")
        
        # Guardar temporalmente la imagen del captcha
        captcha_path = os.path.join(tempfile.gettempdir(), "captcha.png")
        captcha_img.screenshot(captcha_path)
        
        print(f"üîç Captcha guardado en: {captcha_path}")
        print("‚ö†Ô∏è Resoluci√≥n autom√°tica fall√≥. Por favor, abre esta imagen y revisa el c√≥digo del captcha")
        
        # Solicitar al usuario que ingrese el captcha
        captcha_value = input("üìù Ingresa el c√≥digo del captcha que ves en la imagen: ")
        
        return captcha_value
    
    def mantener_sesion_abierta(self):
        """Mantiene la sesi√≥n abierta para que puedas interactuar manualmente"""
        print("\n‚úÖ Sesi√≥n iniciada correctamente.")
        print("‚åõ La ventana del navegador permanecer√° abierta para que puedas navegar manualmente.")
        print("‚ö†Ô∏è El script seguir√° ejecut√°ndose hasta que cierres manualmente la ventana o presiones Ctrl+C en la consola.")
        
        try:
            # Esperar indefinidamente hasta que el usuario cierre la ventana o interrumpa el script
            while self.driver.window_handles:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Proceso interrumpido por el usuario")
        except Exception as e:
            print(f"\n‚ùå Error: {str(e)}")
        finally:
            self.cerrar()
    
    def cerrar(self):
        """Cierra el navegador"""
        try:
            self.driver.quit()
            print("‚úÖ Navegador cerrado correctamente")
        except Exception as e:
            print(f"‚ö†Ô∏è Error al cerrar el navegador: {str(e)}")


# -----------------------------------------------------
# MAIN PARA EJECUCI√ìN
# -----------------------------------------------------

if __name__ == "__main__":
    print("üöÄ Iniciando proceso de login en Avicena Colsanitas...")

    # Obtener credenciales desde variables de entorno
    USUARIO = os.environ.get("AVICENA_USUARIO")
    PASSWORD = os.environ.get("AVICENA_PASSWORD")
    
    # Verificar que existan las credenciales
    if not USUARIO or not PASSWORD:
        print("‚ùå Error: No se encontraron las credenciales en el archivo .env")
        print("Por favor, crea un archivo .env con las siguientes variables:")
        print("AVICENA_USUARIO=tu_usuario")
        print("AVICENA_PASSWORD=tu_contrase√±a")
        print("OPENAI_API_KEY=tu_api_key_de_openai")
        exit(1)
    
    # Verificar que exista la API key de OpenAI
    if not os.environ.get("OPENAI_API_KEY"):
        print("‚ùå Error: No se encontr√≥ la API key de OpenAI en el archivo .env")
        print("A√±ade OPENAI_API_KEY=tu_api_key_de_openai al archivo .env")
        exit(1)
    
    try:
        avicena = AvicenaLogin()
        
        # Iniciar sesi√≥n (con resoluci√≥n autom√°tica del captcha)
        if avicena.login(USUARIO, PASSWORD):
            # Mantener la sesi√≥n abierta para navegaci√≥n manual
            avicena.mantener_sesion_abierta()
        else:
            print("‚ùå Fall√≥ el inicio de sesi√≥n. Finalizando.")
            avicena.cerrar()

    except Exception as e:
        print(f"‚ùå Error inesperado: {str(e)}")
        try:
            avicena.cerrar()
        except:
            pass